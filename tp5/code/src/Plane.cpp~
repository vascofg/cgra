#include "Plane.h"
#include "myUnitCube.h"
#include <GL/glu.h>


Plane::Plane(void)
{
	_numDivisions = 1;
	xDiv=1;
	yDiv=1;
}

Plane::Plane(int n)
{
	_numDivisions = n;
	xDiv=1;
	yDiv=1;
}


Plane::~Plane(void)
{
}

void Plane::draw()
{
	glPushMatrix();
		glRotatef(180.0,1,0,0);
		glTranslatef(-0.5,0.0,-0.5);
		glScalef(1.0/(double) _numDivisions, 1 ,1.0/(double) _numDivisions);
		glNormal3f(0,-1,0);

		for (int bx = 0; bx<_numDivisions; bx++)
		{
			glBegin(GL_TRIANGLE_STRIP);
				glTexCoord2f(xDiv*bx/(float)_numDivisions,0); glVertex3f(bx, 0, 0);
				for (int bz = 0; bz<_numDivisions; bz++)
				{
					
			
					glTexCoord2f(xDiv*(bx +1)/(float)_numDivisions,yDiv*(bz)/(float)_numDivisions); 
					glVertex3f(bx + 1, 0, bz);
					
					glTexCoord2f(xDiv*(bx)/(float)_numDivisions,yDiv*(bz +1)/(float)_numDivisions);
					glVertex3f(bx, 0, bz + 1);
				}
				glTexCoord2f(xDiv*(bx +1)/(float)_numDivisions,yDiv*1); glVertex3d(bx+ 1, 0, _numDivisions);

			glEnd();
		}
	glPopMatrix();

}

void Plane::drawMaintainRatio(int textureWidth, int textureHeight)
{	
	// get the ratio
	float ratio=textureHeight/(float)textureWidth;
	
	glPushMatrix();
		glRotatef(180.0,1,0,0);
		glTranslatef(-0.5,0.0,-0.5);
		glScalef(1.0/(double) _numDivisions, 1 ,1.0/(double) _numDivisions);
		glNormal3f(0,-1,0);

		for (int bx = 0; bx<_numDivisions; bx++)
		{
			glBegin(GL_TRIANGLE_STRIP);
				glTexCoord2f(bx/(float)(_numDivisions-5),0); glVertex3f(bx, 0, 0);
				for (int bz = 0; bz<_numDivisions; bz++)
				{
					// First coord
					if(bz/(float)_numDivisions<ratio)
						glTexCoord2f((bx +1)/(float)_numDivisions,bz/(ratio*_numDivisions)); 
					else if(bz/(float)_numDivisions==ratio) 
						glTexCoord2f((bx +1)/(float)_numDivisions,1); 
					glVertex3f(bx + 1, 0, bz);
					
					// Second Cord
					if(bz/(float)_numDivisions<ratio)
						glTexCoord2f((bx)/(float)(_numDivisions),(bz +1)/(ratio*_numDivisions));
					else if(bz/(float)_numDivisions==ratio) 
						glTexCoord2f((bx)/(float)(_numDivisions),1);
					glVertex3f(bx, 0, bz + 1);
				}
				glTexCoord2f((bx +1)/(float)(_numDivisions-5),1/(float)ratio); glVertex3d(bx+ 1, 0, _numDivisions);

			glEnd();
		}
	glPopMatrix();

}
void Plane::draw(int xDiv, int yDiv){
	this->xDiv=xDiv;
	this->yDiv=yDiv;
	draw();
}

void Plane::drawCentered(){

	glPushMatrix();
		glRotatef(180.0,1,0,0);
		glTranslatef(-0.5,0.0,-0.5);
		glScalef(1.0/(double) _numDivisions, 1 ,1.0/(double) _numDivisions);
		glNormal3f(0,-1,0);

		for (int bx = 0; bx<_numDivisions; bx++)
		{
			glBegin(GL_TRIANGLE_STRIP);
				glTexCoord2f(-2+4*bx/(float)_numDivisions,0); glVertex3f(bx, 0, 0);
				for (int bz = 0; bz<_numDivisions; bz++)
				{
					
			
					glTexCoord2f(-2+4*(bx +1)/(float)_numDivisions,-1+3*(bz)/(float)_numDivisions); 
					glVertex3f(bx + 1, 0, bz);
					
					glTexCoord2f(-2+4*(bx)/(float)_numDivisions,-1+3*(bz +1)/(float)_numDivisions);
					glVertex3f(bx, 0, bz + 1);
				}
				glTexCoord2f(-2+4*(bx +1)/(float)_numDivisions,-1+3*1); glVertex3d(bx+ 1, 0, _numDivisions);

			glEnd();
		}
	glPopMatrix();

}

